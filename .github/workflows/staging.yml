name: cd

on:
  push:
    branches:
      - staging

jobs:
  cd:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest]
        node: [14]

    steps:
      - name: Checkout ðŸ›Ž
        uses: actions/checkout@v2
        with:
          ref: ${{ github.ref }}

      - name: Setup node env
        uses: actions/setup-node@v2.1.5
        with:
          node-version: ${{ matrix.node }}
          check-latest: true

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Cache node_modules
        uses: actions/cache@v2.1.4
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: yarn --frozen-lockfile

      - name: Run linter
        run: yarn lint

      - name: Build project
        run: yarn build

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" > ~/.ssh/staging.key
          chmod 600 ~/.ssh/staging.key
          cat >>~/.ssh/config <<END
          Host staging
            HostName $SSH_HOST
            Port $SSH_PORT
            User $SSH_USER
            IdentityFile ~/.ssh/staging.key
            StrictHostKeyChecking no
            SendEnv APP_DIR
          END
        env:
          SSH_USER: ${{ secrets.STAGING_SSH_USER }}
          SSH_KEY: ${{ secrets.STAGING_SSH_KEY }}
          SSH_HOST: ${{ secrets.STAGING_SSH_HOST }}
          SSH_PORT: ${{ secrets.STAGING_SSH_PORT }}
          APP_DIR: ${{ secrets.STAGING_APP_DIR }}

      - name: Copy dist files
        run: |
          ssh staging 'mkdir -p $APP_DIR/artifacts/'
          scp deploy.sh staging:$APP_DIR/
          scp -r .nuxt staging:$APP_DIR/artifacts/.nuxt
          scp -r static staging:$APP_DIR/artifacts/static
          scp -r ecosystem.config.js nuxt.config.ts package.json tsconfig.json yarn.lock staging:$APP_DIR/artifacts/
        env:
          APP_DIR: ${{ secrets.STAGING_APP_DIR }}

      - name: Run deploy script
        run: ssh staging 'cd $APP_DIR && bash deploy.sh'
        env:
          APP_DIR: ${{ secrets.STAGING_APP_DIR }}
